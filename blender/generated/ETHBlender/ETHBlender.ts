// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get commitment(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pkx(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get pky(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get leafIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nullifierHash(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lead(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get relayer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get amountOutMin(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nullifierHash(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lead(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get relayer(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ETHBlender__stateResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getVerifier(): Address {
    return this.value0;
  }

  getCommittee(): Address {
    return this.value1;
  }

  getRouter(): Address {
    return this.value2;
  }

  getHash2(): Address {
    return this.value3;
  }

  getHash4(): Address {
    return this.value4;
  }

  getMerkleTreeHeight(): BigInt {
    return this.value5;
  }
}

export class ETHBlender extends ethereum.SmartContract {
  static bind(address: Address): ETHBlender {
    return new ETHBlender("ETHBlender", address);
  }

  FIELD_SIZE(): BigInt {
    let result = super.call("FIELD_SIZE", "FIELD_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FIELD_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FIELD_SIZE", "FIELD_SIZE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ROOT_HISTORY_SIZE(): BigInt {
    let result = super.call(
      "ROOT_HISTORY_SIZE",
      "ROOT_HISTORY_SIZE():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ROOT_HISTORY_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ROOT_HISTORY_SIZE",
      "ROOT_HISTORY_SIZE():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ZERO_VALUE(): BigInt {
    let result = super.call("ZERO_VALUE", "ZERO_VALUE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ZERO_VALUE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ZERO_VALUE", "ZERO_VALUE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitments(param0: BigInt): boolean {
    let result = super.call("commitments", "commitments(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_commitments(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("commitments", "commitments(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentRootIndex(): BigInt {
    let result = super.call(
      "currentRootIndex",
      "currentRootIndex():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentRootIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRootIndex",
      "currentRootIndex():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  filledSubtrees(param0: BigInt): BigInt {
    let result = super.call(
      "filledSubtrees",
      "filledSubtrees(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_filledSubtrees(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "filledSubtrees",
      "filledSubtrees(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastRoot(): BigInt {
    let result = super.call("getLastRoot", "getLastRoot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLastRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLastRoot", "getLastRoot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashLeftRight(_hasher: Address, _left: BigInt, _right: BigInt): BigInt {
    let result = super.call(
      "hashLeftRight",
      "hashLeftRight(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_hasher),
        ethereum.Value.fromUnsignedBigInt(_left),
        ethereum.Value.fromUnsignedBigInt(_right),
      ],
    );

    return result[0].toBigInt();
  }

  try_hashLeftRight(
    _hasher: Address,
    _left: BigInt,
    _right: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashLeftRight",
      "hashLeftRight(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_hasher),
        ethereum.Value.fromUnsignedBigInt(_left),
        ethereum.Value.fromUnsignedBigInt(_right),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasher(): Address {
    let result = super.call("hasher", "hasher():(address)", []);

    return result[0].toAddress();
  }

  try_hasher(): ethereum.CallResult<Address> {
    let result = super.tryCall("hasher", "hasher():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isKnownRoot(_root: BigInt): boolean {
    let result = super.call("isKnownRoot", "isKnownRoot(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_root),
    ]);

    return result[0].toBoolean();
  }

  try_isKnownRoot(_root: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKnownRoot", "isKnownRoot(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_root),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSpent(_nullifierHash: BigInt): boolean {
    let result = super.call("isSpent", "isSpent(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_nullifierHash),
    ]);

    return result[0].toBoolean();
  }

  try_isSpent(_nullifierHash: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSpent", "isSpent(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_nullifierHash),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSpentArray(_nullifierHashes: Array<BigInt>): Array<boolean> {
    let result = super.call(
      "isSpentArray",
      "isSpentArray(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(_nullifierHashes)],
    );

    return result[0].toBooleanArray();
  }

  try_isSpentArray(
    _nullifierHashes: Array<BigInt>,
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "isSpentArray",
      "isSpentArray(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(_nullifierHashes)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  leads(param0: BigInt): Address {
    let result = super.call("leads", "leads(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_leads(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("leads", "leads(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  levels(): BigInt {
    let result = super.call("levels", "levels():(uint32)", []);

    return result[0].toBigInt();
  }

  try_levels(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("levels", "levels():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextIndex(): BigInt {
    let result = super.call("nextIndex", "nextIndex():(uint32)", []);

    return result[0].toBigInt();
  }

  try_nextIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextIndex", "nextIndex():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nullifierHashes(param0: BigInt): boolean {
    let result = super.call(
      "nullifierHashes",
      "nullifierHashes(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBoolean();
  }

  try_nullifierHashes(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nullifierHashes",
      "nullifierHashes(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roots(param0: BigInt): BigInt {
    let result = super.call("roots", "roots(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_roots(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roots", "roots(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(): ETHBlender__stateResult {
    let result = super.call(
      "state",
      "state():(address,address,address,address,address,uint32)",
      [],
    );

    return new ETHBlender__stateResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
    );
  }

  try_state(): ethereum.CallResult<ETHBlender__stateResult> {
    let result = super.tryCall(
      "state",
      "state():(address,address,address,address,address,uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ETHBlender__stateResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
      ),
    );
  }

  zeros(i: BigInt): BigInt {
    let result = super.call("zeros", "zeros(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(i),
    ]);

    return result[0].toBigInt();
  }

  try_zeros(i: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("zeros", "zeros(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(i),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get config(): ConstructorCallConfigStruct {
    return changetype<ConstructorCallConfigStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallConfigStruct extends ethereum.Tuple {
  get verifier(): Address {
    return this[0].toAddress();
  }

  get committee(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get hash2(): Address {
    return this[3].toAddress();
  }

  get hash4(): Address {
    return this[4].toAddress();
  }

  get merkleTreeHeight(): BigInt {
    return this[5].toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get params(): DepositCallParamsStruct {
    return changetype<DepositCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCallParamsStruct extends ethereum.Tuple {
  get commitment(): BigInt {
    return this[0].toBigInt();
  }

  get pk(): DepositCallParamsPkStruct {
    return changetype<DepositCallParamsPkStruct>(this[1].toTuple());
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }
}

export class DepositCallParamsPkStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get params(): SwapCallParamsStruct {
    return changetype<SwapCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapCallParamsStruct extends ethereum.Tuple {
  get proof(): Bytes {
    return this[0].toBytes();
  }

  get root(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierHash(): BigInt {
    return this[2].toBigInt();
  }

  get lead(): BigInt {
    return this[3].toBigInt();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get recipient(): Address {
    return this[5].toAddress();
  }

  get relayer(): Address {
    return this[6].toAddress();
  }

  get fee(): BigInt {
    return this[7].toBigInt();
  }

  get tokenOut(): Address {
    return this[8].toAddress();
  }

  get amountOutMin(): BigInt {
    return this[9].toBigInt();
  }

  get commands(): Bytes {
    return this[10].toBytes();
  }

  get inputs(): Array<Bytes> {
    return this[11].toBytesArray();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get params(): WithdrawCallParamsStruct {
    return changetype<WithdrawCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCallParamsStruct extends ethereum.Tuple {
  get proof(): Bytes {
    return this[0].toBytes();
  }

  get root(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierHash(): BigInt {
    return this[2].toBigInt();
  }

  get lead(): BigInt {
    return this[3].toBigInt();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get recipient(): Address {
    return this[5].toAddress();
  }

  get relayer(): Address {
    return this[6].toAddress();
  }

  get fee(): BigInt {
    return this[7].toBigInt();
  }
}
